//
// pasteque-unit
//
// 0.0.7
//
// Beautify typography:
// Unit.
// pasteque-unit is a fork from Compass typography.
//
// Zaza Agency <hi@zaza.africa> (zaza.africa)
//
// This work is licensed under the Creative Commons
// Attribution 4.0 International License. To view a copy
// of this license, visit http://creativecommons.org/licenses/by/4.0/.
//

/* stylelint-disable */
/// pasteque-unit constants.
/// @access private
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @property {Number} "BROWSER_DEFAULT_FONT_SIZE" [16px]
/// @type Map
$_PSTQ_: map-merge(if(global-variable-exists("_PSTQ_"), $_PSTQ_, ()), (
  "UNIT": (
    "BROWSER_DEFAULT_FONT_SIZE": 16px,
  ),
)) !global;
/* stylelint-enable */

/// The length unit in which to output rhythm values. Supported values: `px`, `em`, `rem`.
/// @author Compass
/// @link http://compass-style.org/reference/compass/typography/
/// @type String
$p-unit-global: "rem" !default;

/// Output fallback in px.
/// @author Compass
/// @link http://compass-style.org/reference/compass/typography/
/// @type Bool
$p-unit__rem--w-fallback: false !default;

/// Convert any CSS `length` or `percentage` value to any another.
/// @author Compass
/// @example
///   p-unit-convert(16px, "rem");
/// @example
///   p-unit-convert(0.6em, "rem", 14px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $length - Css `length` or `percentage` value.
/// @parameter {String} $unit - String matching a css unit keyword.
/// @parameter {Null|Number} $from [null] - When converting from relative units, the absolute length (in px) to which `$length` refers.
/// @return {Number} New converted length.
@function p-unit-convert($length, $unit, $from: null) {
  $length-unit: unit($length);

  @if ($length-unit == $unit) {
    @return $length;
  }

  $root-size: map-get(map-get($_PSTQ_, "UNIT"), "BROWSER_DEFAULT_FONT_SIZE");

  @if (type-of($from) == "number") {
    @if (unit($from) != "px") {
      @warn "$from must resolve to a value in px.";

      $from: $root-size;
    }
  }
  @else {
    $from: $root-size;
  }

  $non-convertible-unit: "ch", "vw", "vh", "vmin"; // stylelint-disable-line plugin/no-unsupported-browser-features
  $length-to-px: $length;

  @if ($length-unit != "px") {
    @if ($length-unit == "em") {
      $length-to-px: ($length / 1em) * $from;
    }
    @else if ($length-unit == "rem") {
      $length-to-px: ($length / 1rem) * $root-size;
    }
    @else if ($length-unit == "%") {
      $length-to-px: ($length / 100%) * $from;
    }
    @else if ($length-unit == "ex") {
      $length-to-px: ($length / 2ex) * $from;
    }
    @else if (index(("in", "mm", "cm", "pt", "pc"), $length-unit) != null) {
      $length-to-px: 0px + $length; // stylelint-disable-line length-zero-no-unit
    }
    @else if (index($non-convertible-unit, $length-unit) != null) {
      @warn "`#{$length-unit}`'s unit can't be reliably converted. Returning original value.";

      @return $length;
    }
    @else {
      @warn "`#{$length-unit}` is an unknown length unit. Returning original value."; // stylelint-disable-next-line no-eol-whitespace

      @return $length;
    }
  }

  $_return: $length-to-px;

  @if ($unit != "px") {
    @if ($unit == "em") {
      $_return: ($length-to-px / $from) * 1em;
    }
    @else if ($unit == "rem") {
      $_return: ($length-to-px / $root-size) * 1rem;
    }
    @else if ($unit == "%") {
      $_return: ($length-to-px / $from) * 100%;
    }
    @else if ($unit == "ex") {
      $_return: ($length-to-px / $from) * 2ex;
    }
    @else if ($unit == "in") {
      $_return: 0in + $length-to-px; // stylelint-disable-line length-zero-no-unit
    }
    @else if ($unit == "mm") {
      $_return: 0mm + $length-to-px; // stylelint-disable-line length-zero-no-unit
    }
    @else if ($unit == "cm") {
      $_return: 0cm + $length-to-px; // stylelint-disable-line length-zero-no-unit
    }
    @else if ($unit == "pt") {
      $_return: 0pt + $length-to-px; // stylelint-disable-line length-zero-no-unit
    }
    @else if ($unit == "pc") {
      $_return: 0pc + $length-to-px; // stylelint-disable-line length-zero-no-unit
    }
    @else if (index($non-convertible-unit, $unit) != null) {
      @warn "`#{$unit}`'s unit can't be reliably converted. Returning px value.";

      @return $length-to-px;
    }
    @else {
      @warn "`#{$unit}` is an unknown length unit. Returning px value.";

      @return $length-to-px;
    }
  }

  @return $_return;
}

/// Get the px/rem versions of a value.
/// @access private
/// @alias p-unit-px-rem
/// @author Compass
/// @example
///   _p-unit-px-rem(13px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $value
/// @return {Map} px/rem versions.
@function _p-unit-px-rem($value) {
  $_return: ("px": $value, "rem": $value);

  @if (type-of($value) == "number") and (not unitless($value)) {
    $value-unit: unit($value);

    @if ($value-unit == "rem") {
      $_return: map-merge($_return, ("px": round(p-unit-convert($value, "px")),));
    }
    @else if ($value-unit == "px") {
      $_return: map-merge($_return, ("px": round($value), "rem": p-unit-convert($value, "rem"),));
    }
  }

  @return $_return;
}

/// Get the px/rem versions of a list (or nested lists).
/// @access private
/// @author Compass
/// @example
///   p-unit-px-rem((13px, 21px));
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {List|Number} $value
/// @return {Map} px/rem versions.
@function p-unit-px-rem($value) {
  $_return: ("px": (), "rem": (),);

  @if (type-of($value) == "list") {
    $separator: list-separator($value);

    @each $sub in $value {
      $_this: p-unit-px-rem($sub);
      $_return: ("px": append(map-get($_return, "px"), map-get($_this, "px"), $separator), "rem": append(map-get($_return, "rem"), map-get($_this, "rem"), $separator),);
    }
  }
  @else {
    $_this: _p-unit-px-rem($value);
    $_return: map-merge($_return, $_this);
  }

  @return $_return;
}

/// Output a given style rule containing rem values along with an (optional) fallback rule for older browsers.
/// @author Compass
/// @example
///   @include p-unit-rem("font-size", 14px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {String} $property - Css property name.
/// @parameter {List|Number} $value - Value or list of values for the property.
/// @parameter {Bool} $fallback [$p-unit__rem--w-fallback] - Use px fallback.
@mixin p-unit-rem($property, $value, $fallback: $p-unit__rem--w-fallback) {
  $eulav: p-unit-px-rem($value);
  $px-value: map-get($eulav, "px");
  $rem-value: map-get($eulav, "rem");

  @if ($fallback) and ($px-value != $rem-value) {
    #{unquote($property)}: $px-value;
  }

  #{unquote($property)}: $rem-value;
}
