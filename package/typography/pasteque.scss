//
// pasteque
//
// 0.0.8
//
// Beautify typography.
// pasteque is a fork from Compass typography.
//
// Zaza Agency <hi@zaza.africa> (zaza.africa)
//
// This work is licensed under the Creative Commons
// Attribution 4.0 International License. To view a copy
// of this license, visit http://creativecommons.org/licenses/by/4.0/.
//

// @import "../pasteque-unit/unit";
@import "../unit/unit";

/* stylelint-disable */
/// pasteque constants.
/// @access private
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @property {Number} "LINE_UNIT" [8px]
/// @property {Number} "LINE_MULTI" [2]
/// @type Map
$_PSTQ_: map-merge(if(global-variable-exists("_PSTQ_"), $_PSTQ_, ()), (
  "LINE_UNIT": 8px,
  "LINE_MULTI": 2,
)) !global;
/* stylelint-enable */

/// Default border-color value.
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @type Color
$p-border-color-global: #ccc !default;

/// Default border-style value.
/// @author Compass
/// @link http://compass-style.org/reference/compass/typography/
/// @type String
$p-border-style-global: "solid" !default;

/// Default border-width value.
/// @author Compass
/// @link http://compass-style.org/reference/compass/typography/
/// @type Number
$p-border-width-global: 1px !default;

/// Toggle vertical grid.
/// @author Compass
/// @link http://compass-style.org/reference/compass/layout/
/// @type Bool
$p-debug-toggle: true !default;

/// Vertical grid color.
/// @author Compass
/// @link http://compass-style.org/reference/compass/layout/
/// @type Color
$p-debug-color: #f00 !default;

/// Calculate rhythm units.
/// @author Compass
/// @example
///   p-rhythm();
/// @example
///   p-rhythm(1, 1px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {Number} $minus [0]
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
/// @return {Number} Rhythm.
@function p-rhythm($lines: 1, $minus: 0, $from: null) {
  $_return: p-unit-convert(((ceil($lines) * (map-get($_PSTQ_, "LINE_UNIT") * map-get($_PSTQ_, "LINE_MULTI"))) - $minus), $p-unit-global, $from);

  @if (unit($_return) == "px") {
    $_return: floor($_return);
  }

  @if ($_return == 0) {
    $_return: $_return / ($_return * 0 + 1);
  }

  @return $_return;
}

/// Calculate the minimum multiple of rhythm units needed to contain a length.
/// @access private
/// @alias p-lines-for
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @example
///   _p-lines-for(16px);
/// @parameter {Number} $from
/// @return {Number} Multiple of rhythm units.
@function _p-lines-for($from) {
  @return ceil($from / (map-get($_PSTQ_, "LINE_UNIT") * map-get($_PSTQ_, "LINE_MULTI")));
}

/// Calculate the minimum multiple of line-height units needed to contain a font-size.
/// @access private
/// @author Compass
/// @example
///   p-lines-for(14px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $from
/// @return {Number} Multiple of line-height units.
@function p-lines-for($from) {
  $_this: _p-lines-for($from);
  $_return: map-get($_PSTQ_, "LINE_MULTI");

  @if ($_this > $_return) {
    $_return: $_this;
  }

  @return $_return;
}

/// Establishes a font baseline.
/// @author Compass
/// @example
///   @include p-establish-baseline;
/// @link http://compass-style.org/reference/compass/typography/
@mixin p-establish-baseline {
  @at-root :root {
    font-size: 100%;
    line-height: p-unit-convert((map-get($_PSTQ_, "LINE_UNIT") * map-get($_PSTQ_, "LINE_MULTI") * 2), "em");
  }
}

/// Adjust a block to have different line height to maintain the rhythm.
/// @author Compass
/// @example
///   @include p-line-height(14px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $lines - Multiples of baseline rhythm.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-line-height($lines, $from: null) {
  $_lines: map-get($_PSTQ_, "LINE_MULTI");

  @if (unitless($lines)) {
    @if ($lines > $_lines) {
      $_lines: $lines;
    }
  }
  @else {
    $_lines: p-lines-for(p-unit-convert($lines, "px", $from));
  } // stylelint-disable-next-line no-eol-whitespace
  
  @include p-unit-rem("line-height", p-rhythm($_lines, 0, $from));
}

/// Adjust a block to have a different font size and line height to maintain the rhythm.
/// @author Compass
/// @example
///   @include p-font-size(16px);
/// @example
///   @include p-font-size(0);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $to
/// @parameter {Null|Number} $lines [null] - Multiples of baseline rhythm.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-font-size($to, $lines: null, $from: null) {
  @if (type-of($lines) != "number") {
    $lines: $to;
  }

  @include p-unit-rem("font-size", p-unit-convert($to, $p-unit-global, $from));
  @include p-line-height($lines, $from);
}

/// Apply leading whitespace as padding.
/// @author Compass
/// @example
///   @include p-padding-top;
/// @example
///   @include p-padding-top(2);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-padding-top($lines: 1, $from: null) {
  @if (not unitless($lines)) {
    $lines: _p-lines-for(p-unit-convert($lines, "px", $from));
  }

  @include p-unit-rem("padding-top", p-rhythm($lines, 0, $from));
}

/// Apply trailing whitespace as padding.
/// @author Compass
/// @example
///   @include p-padding-bottom;
/// @example
///   @include p-padding-bottom(2);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-padding-bottom($lines: 1, $from: null) {
  @if (not unitless($lines)) {
    $lines: _p-lines-for(p-unit-convert($lines, "px", $from));
  }

  @include p-unit-rem("padding-bottom", p-rhythm($lines, 0, $from));
}

/// Shorthand mixin to apply whitespace for any side as padding.
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @example
///   @include p-padding;
/// @example
///   @include p-padding(1);
/// @example
///   @include p-padding($right: 1);
/// @parameter {Number} $top [1] - Multiples of baseline rhythm to apply as leading whitespace as padding.
/// @parameter {Number} $right [0] - Multiples of baseline rhythm to apply as whitespace as padding-right.
/// @parameter {Number} $bottom [$top] - Multiples of baseline rhythm to apply as trailing whitespace as padding.
/// @parameter {Number} $left [$right] - Multiples of baseline rhythm to apply as whitespace as padding-left.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-padding($top: 1, $right: 0, $bottom: $top, $left: $right, $from: null) {
  $value: ();

  @each $key, $_value in ("top": $top, "right": $right, "bottom": $bottom, "left": $left) {
    @if (not unitless($_value)) {
      $_value: _p-lines-for(p-unit-convert($_value, "px", $from));
    }

    @if ($_value > 0) {
      $value: map-merge($value, ($key: $_value));
    }
  }

  @if (map-get($value, "top") == map-get($value, "right")) and (map-get($value, "top") == map-get($value, "bottom")) and (map-get($value, "top") == map-get($value, "left")) {
    @include p-unit-rem("padding", p-rhythm(map-get($value, "top"), 0, $from));
  }
  @else if (map-has-key($value, "top")) and (map-get($value, "top") == map-get($value, "bottom")) and (map-has-key($value, "right")) and (map-get($value, "right") == map-get($value, "left")) {
    @include p-unit-rem("padding", (p-rhythm(map-get($value, "top"), 0, $from) p-rhythm(map-get($value, "right"), 0, $from)));
  }
  @else if (map-has-key($value, "top")) and (map-has-key($value, "right")) and (map-has-key($value, "bottom")) and (map-has-key($value, "left")) {
    @include p-unit-rem("padding", (p-rhythm(map-get($value, "top"), 0, $from) p-rhythm(map-get($value, "right"), 0, $from) p-rhythm(map-get($value, "bottom"), 0, $from) p-rhythm(map-get($value, "left"), 0, $from)));
  }
  @else {
    @if (map-has-key($value, "top")) {
      @include p-unit-rem("padding-top", p-rhythm(map-get($value, "top"), 0, $from));
    }

    @if (map-has-key($value, "right")) {
      @include p-unit-rem("padding-right", p-rhythm(map-get($value, "right"), 0, $from));
    }

    @if (map-has-key($value, "bottom")) {
      @include p-unit-rem("padding-bottom", p-rhythm(map-get($value, "bottom"), 0, $from));
    }

    @if (map-has-key($value, "left")) {
      @include p-unit-rem("padding-left", p-rhythm(map-get($value, "left"), 0, $from));
    }
  }
}

/// Apply leading whitespace as margin.
/// @author Compass
/// @example
///   @include p-margin-top;
/// @example
///   @include p-margin-top(2);
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-margin-top($lines: 1, $from: null) {
  @if (not unitless($lines)) {
    $lines: _p-lines-for(p-unit-convert($lines, "px", $from));
  }

  @include p-unit-rem("margin-top", p-rhythm($lines, 0, $from));
}

/// Apply trailing whitespace as margin.
/// @author Compass
/// @example
///   @include p-margin-bottom;
/// @example
///   @include p-margin-bottom(2);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-margin-bottom($lines: 1, $from: null) {
  @if (not unitless($lines)) {
    $lines: _p-lines-for(p-unit-convert($lines, "px", $from));
  }

  @include p-unit-rem("margin-bottom", p-rhythm($lines, 0, $from));
}

/// Shorthand mixin to apply whitespace for any side as margin.
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @example
///   @include p-margin;
/// @example
///   @include p-margin(1);
/// @example
///   @include p-margin($right: 1);
/// @parameter {Number} $top [1] - Multiples of baseline rhythm to apply as leading whitespace as margin.
/// @parameter {Number} $right [0] - Multiples of baseline rhythm to apply as whitespace as margin-right.
/// @parameter {Number} $bottom [$top] - Multiples of baseline rhythm to apply as trailing whitespace as margin.
/// @parameter {Number} $left [$right] - Multiples of baseline rhythm to apply as whitespace as margin-left.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-margin($top: 1, $right: 0, $bottom: $top, $left: $right, $from: null) {
  $value: ();

  @each $key, $_value in ("top": $top, "right": $right, "bottom": $bottom, "left": $left) {
    @if (not unitless($_value)) {
      $_value: _p-lines-for(p-unit-convert($_value, "px", $from));
    }

    @if ($_value != 0) {
      $value: map-merge($value, ($key: $_value));
    }
  }

  @if (map-get($value, "top") == map-get($value, "right")) and (map-get($value, "top") == map-get($value, "bottom")) and (map-get($value, "top") == map-get($value, "left")) {
    @include p-unit-rem("margin", p-rhythm(map-get($value, "top"), 0, $from));
  }
  @else if (map-has-key($value, "top")) and (map-get($value, "top") == map-get($value, "bottom")) and (map-has-key($value, "right")) and (map-get($value, "right") == map-get($value, "left")) {
    @include p-unit-rem("margin", (p-rhythm(map-get($value, "top"), 0, $from) p-rhythm(map-get($value, "right"), 0, $from)));
  }
  @else if (map-has-key($value, "top")) and (map-has-key($value, "right")) and (map-has-key($value, "bottom")) and (map-has-key($value, "left")) {
    @include p-unit-rem("margin", (p-rhythm(map-get($value, "top"), 0, $from) p-rhythm(map-get($value, "right"), 0, $from) p-rhythm(map-get($value, "bottom"), 0, $from) p-rhythm(map-get($value, "left"), 0, $from)));
  }
  @else {
    @if (map-has-key($value, "top")) {
      @include p-unit-rem("margin-top", p-rhythm(map-get($value, "top"), 0, $from));
    }

    @if (map-has-key($value, "right")) {
      @include p-unit-rem("margin-right", p-rhythm(map-get($value, "right"), 0, $from));
    }

    @if (map-has-key($value, "bottom")) {
      @include p-unit-rem("margin-bottom", p-rhythm(map-get($value, "bottom"), 0, $from));
    }

    @if (map-has-key($value, "left")) {
      @include p-unit-rem("margin-left", p-rhythm(map-get($value, "left"), 0, $from));
    }
  }
}

/// Apply a border and whitespace to any side without destroying the vertical rhythm.
/// @access private
/// @author Compass
/// @example
///   @include _p-border("all");
/// @example
///   @include _p-border("top", 1, 1px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {String} $side - String matching a css side keyword, e.g. `top`, `right`, `bottom`, `left` or all.
/// @parameter {Number} $width [$p-border-width-global] - Border width.
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {String} $style [$p-border-style-global] - Border style.
/// @parameter {Color} $color [$p-border-color-global] - Border color.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin _p-border($side, $width: $p-border-width-global, $lines: 1, $style: $p-border-style-global, $color: $p-border-color-global, $from: null) {
  $padding-property: "padding";
  $border-property: "border";

  @if (index(("top", "right", "bottom", "left"), $side) != null) {
    $padding-property: $padding-property + "-#{$side}";
    $border-property: $border-property + "-#{$side}";
  }

  @if (not unitless($lines)) {
    $lines: _p-lines-for(p-unit-convert($lines, "px", $from));
  }

  @include p-unit-rem($padding-property, p-rhythm($lines, $width, $from));
  @include p-unit-rem($border-property, (p-unit-convert($width, $p-unit-global, $from) unquote($style) $color));
}

/// Apply borders and whitespace equally to all sides.
/// @author Compass
/// @example
///   @include p-border;
/// @example
///   @include p-border(1, 1px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $width [$p-border-width-global] - Border width.
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {String} $style [$p-border-style-global] - Border style.
/// @parameter {Color} $color [$p-border-color-global] - Border color.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-border($width: $p-border-width-global, $lines: 1, $style: $p-border-style-global, $color: $p-border-color-global, $from: null) {
  @include _p-border("all", $width, $lines, $style, $color, $from);
}

/// Apply a leading border.
/// @author Compass
/// @example
///   @include p-border-top;
/// @example
///   @include p-border-top(1, 1px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $width [$p-border-width-global] - Border width.
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {String} $style [$p-border-style-global] - Border style.
/// @parameter {Color} $color [$p-border-color-global] - Border color.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-border-top($width: $p-border-width-global, $lines: 1, $style: $p-border-style-global, $color: $p-border-color-global, $from: null) {
  @include _p-border("top", $width, $lines, $style, $color, $from);
}

/// Apply a trailing border.
/// @author Compass
/// @example
///   @include p-border-bottom;
/// @example
///   @include p-border-bottom(1, 1px);
/// @link http://compass-style.org/reference/compass/typography/
/// @parameter {Number} $width [$p-border-width-global] - Border width.
/// @parameter {Number} $lines [1] - Multiples of baseline rhythm.
/// @parameter {String} $style [$p-border-style-global] - Border style.
/// @parameter {Color} $color [$p-border-color-global] - Border color.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-border-bottom($width: $p-border-width-global, $lines: 1, $style: $p-border-style-global, $color: $p-border-color-global, $from: null) {
  @include _p-border("bottom", $width, $lines, $style, $color, $from);
}

/// Show background-image used to debug vertical alignment.
/// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
/// @example
///   @include p-debug;
/// @example
///   @include p-debug(#000);
/// @parameter {Color} $color [$p-debug-color]
@mixin p-debug($color: $p-debug-color) {
  $alpha: if(alpha($color) < 1, alpha($color), 0.6);
  $rhythm: map-get($_PSTQ_, "LINE_UNIT");
  $background-image: (linear-gradient(to top, #{rgba($color, ($alpha / 3))} #{percentage(1px / $rhythm)}, transparent #{percentage(1px / $rhythm)}),);
  $background-size: (100% p-unit-convert($rhythm, $p-unit-global),); // stylelint-disable-next-line no-eol-whitespace
  
  @for $i from 1 through length(map-remove($_PSTQ_, "UNIT")) {
    $key: nth(map-keys(map-remove($_PSTQ_, "UNIT")), $i); // stylelint-disable-next-line no-eol-whitespace
    
    @if ($key != "LINE_UNIT") {
      $_rhythm: map-get($_PSTQ_, $key) * $rhythm;
      $background-image: append($background-image, linear-gradient(to top, #{rgba($color, if(($i % 2) == 0, $alpha, ($alpha / 3)))} #{percentage(1px / $_rhythm)}, transparent #{percentage(1px / $_rhythm)}), "comma");
      $background-size: append($background-size, 100% p-unit-convert($_rhythm, $p-unit-global), "comma");
    }
  }

  background-image: $background-image;
  background-position: top right; // stylelint-disable-next-line no-eol-whitespace
  
  @include p-unit-rem("background-size", $background-size);
}
