//
// pasteque-baseline
//
// 0.0.6
//
// Beautify typography:
// Aligning to baseline.
//
// Zaza Agency <hi@zaza.africa> (zaza.africa)
//
// This work is licensed under the Creative Commons
// Attribution 4.0 International License. To view a copy
// of this license, visit http://creativecommons.org/licenses/by/4.0/.
//

@import "../../pasteque/sass/p-typography";

////
//// @author Zaza Agency <hi@zaza.africa> (zaza.africa)
////

/// Fonts.
/// @access private
/// @type Map
$p-baseline-teque: () !global;

/// Font setter.
/// @example
///   @include p-baseline-teque-set("heading", ("family": ("Open Sans", sans-serif), "cap-height": 0.72));
/// @link https://www.sitepoint.com/dealing-constants-sass/
/// @output ø
/// @parameter {String} $key - Font's key to set.
/// @parameter {Map} $spec - Font spec map.
@mixin p-baseline-teque-set($key, $spec) {
  @if (map-has-key($p-baseline-teque, $key)) {
    @error "`#{$key}`'s family already defined!";
  }

  @if (type-of($spec) != "map") {
    @error "`#{$key}`'s family $spec must be a map.";
  }

  @if (not map-has-key($spec, "cap-height")) {
    @error "`#{$key}`'s family $spec must have a correct (unitless number) `cap-height` value.";
  }

  $cap-height: map-get($spec, "cap-height");

  @if (type-of($cap-height) != "number") or (not unitless($cap-height)) or ($cap-height > 1) {
    @error "`#{$key}`'s family $spec must have a correct (unitless number) `cap-height` value.";
  }

  $p-baseline-teque: map-merge($p-baseline-teque, (quote($key): $spec)) !global;
}

/// Calculate distance to shift text down.
/// @access private
/// @example
///   p-baseline-shift(16px, 0.72em);
/// @link https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b
/// @parameter {Number} $to
/// @parameter {Number} $cap-height
/// @parameter {Number} $from [null]
/// @return {Number} Distance to shift text down.
@function p-baseline-shift($to, $cap-height, $from: null) {
  @if (type-of($from) != "number") {
    $from: map-get(map-get($_PSTQ_, "UNIT"), "BROWSER_DEFAULT_FONT_SIZE");
  }

  $to: p-unit-convert($to, "px", $from);
  $lines: p-lines-for($to);
  $to: p-unit-convert($to, $p-unit-global, $from);
  $line-height: p-rhythm($lines, 0, $from);
  $cap-height: p-unit-convert($cap-height, $p-unit-global, $from);
  $from: p-unit-convert($from, $p-unit-global);
  $_return: $to / 2 * ($line-height * $from / $to - $cap-height) / $from;

  @if (unit($_return) == "px") {
    $_return: floor($_return);
  }

  @return $_return;
}

/// Apply leading whitespace as padding to align to baseline.
/// @example
///   @include p-baseline-leader(16px, "heading");
/// @link https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b
/// @parameter {Number} $to
/// @parameter {String} $font - Key of font to get.
/// @parameter {Number} $lines [0] - Multiples of baseline rhythm to apply as leading padding.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-baseline-leader($to, $font, $lines: 0, $from: null) {
  @if (map-has-key($p-baseline-teque, $font)) {
    $cap-height: map-get(map-get($p-baseline-teque, $font), "cap-height") * 1em;
    $shift: p-baseline-shift($to, $cap-height, $from);

    @if (not unitless($lines)) {
      $lines: _p-lines-for($lines);
    }

    $leader: p-rhythm($lines, 0, $from);

    @include p-unit-rem("padding-top", $shift + $leader);
  }
  @else {
    @warn "$p-baseline-teque has no `#{$font}` font. Output ø.";
  }
}

/// Apply trailing whitespace to align to baseline.
/// @example
///   @include p-baseline-trailer(16px, "heading");
/// @example
///   @include p-baseline-trailer(16px, "heading", $property: "margin");
/// @link https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b
/// @parameter {Number} $to
/// @parameter {String} $font - Key of font to get.
/// @parameter {Number} $lines [0] - Multiples of baseline rhythm to apply as trailing whitespace.
/// @parameter {String} $property ["margin"] - Can be margin or padding.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-baseline-trailer($to, $font, $lines: 0, $property: "margin", $from: null) {
  @if (map-has-key($p-baseline-teque, $font)) {
    $cap-height: map-get(map-get($p-baseline-teque, $font), "cap-height") * 1em;
    $_shift: p-baseline-shift($to, $cap-height, $from);
    $reference: p-rhythm(1, 0, $from);
    $_lines: 0;

    @if (not unitless($lines)) {
      $lines: _p-lines-for($lines);
    }

    $_trailer: p-rhythm($lines, 0, $from);

    @if ($_shift > ($_trailer + $reference)) {
      $shift-to-px: p-unit-convert($_shift, "px", $from);
      $_lines: _p-lines-for($shift-to-px);
    }

    $trailer: p-rhythm(($lines + $_lines + 1), 0, $from);
    $shift: $trailer - $_shift;

    @include p-unit-rem("#{$property}-bottom", $shift);

    @if ($property == "margin") and ($reference > $shift) {
      & + * { // stylelint-disable-line scss/selector-no-redundant-nesting-selector
        margin-top: 0;
      }
    }
  }
  @else {
    @warn "$p-baseline-teque has no `#{$font}` font. Output ø.";
  }
}

/// Aligning text to baseline the right way.
/// @example
///   @include p-type-to-baseline(16px, "heading");
/// @link https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b
/// @parameter {Number} $to
/// @parameter {String} $font - Key of font to get.
/// @parameter {Number} $leader [0] - Multiples of baseline rhythm to apply as leading padding.
/// @parameter {Number} $trailer [$trailer] - Multiples of baseline rhythm to apply as trailing margin.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-type-to-baseline($to, $font: null, $leader: 0, $trailer: $leader, $from: null) {
  @include p-font-size($to, $from);

  @if (map-has-key($p-baseline-teque, $font)) {
    @include p-baseline-leader($to, $font, $leader, $from);
    @include p-baseline-trailer($to, $font, $trailer, "margin", $from);
  }
}

/// Aligning component to baseline the right way.
/// @example
///   @include p-component-to-baseline(16px, "title", 1);
/// @link https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b
/// @parameter {Number} $to
/// @parameter {String} $font - Key of font to get.
/// @parameter {Number} $lines [0] - Multiples of baseline rhythm to apply for top and bottom padding.
/// @parameter {Null|Number} $from [null] - Adjust from a font-size other than the base font-size.
@mixin p-component-to-baseline($to, $font: null, $lines: 0, $from: null) {
  @include p-font-size($to, $from);

  @if (map-has-key($p-baseline-teque, $font)) {
    @include p-baseline-leader($to, $font, $lines, $from);
    @include p-baseline-trailer($to, $font, $lines, "padding", $from);
  }
}
