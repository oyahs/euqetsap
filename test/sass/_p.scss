//
// pasteque
//
// 0.0.7
//
// Beautify typography.
// pasteque is a fork from Compass typography.
//
// Zaza Agency <hi@zaza.africa> (zaza.africa)
//
// This work is licensed under the Creative Commons
// Attribution 4.0 International License. To view a copy
// of this license, visit http://creativecommons.org/licenses/by/4.0/.
//

@mixin before-test-typography {
  /* stylelint-disable */
  $_PSTQ_: map-merge(if(global-variable-exists("_PSTQ_"), $_PSTQ_, ()), (
    "LINE_UNIT": 8px,
    "LINE_MULTI": 2,
  )) !global;
  /* stylelint-enable */
  $p-border-color-global: #ccc !global;
  $p-border-style-global: "solid" !global;
  $p-border-width-global: 1px !global;
  $p-debug-color: #f00 !global;
}

@include before-test-typography;

@include test-module("p-rhythm [function]") {
  @include test("Should return default rhythm unit.") {
    $lines: 1;
    $minus: 0;
    $output: p-rhythm($lines, $minus);
    $expect: 1rem;

    @include assert-equal($output, $expect);
  }

  @include test("Should return a multiple of rhythm units minus new assigned `$minus` value") {
    $lines: 1;
    $minus: 2px;
    $output: p-rhythm($lines, $minus);
    $expect: 0.875rem;
    
    @include assert-equal($output, $expect);
  }

  @include test("Should return a multiple of rhythm unit ceiling `$lines` value.") {
    $lines: 3.4;
    $output: p-rhythm($lines);
    $expect: 4rem;

    @include assert-equal($output, $expect);
  }
}

@include test-module("_p-lines-for [function]") {
  @include test("Should return minimum multiple of rhythm units needed to contain `$from`.") {
    $from: -144px;
    $output: _p-lines-for($from);
    $expect: -9;

    @include assert-equal($output, $expect);
  }
}

@include test-module("p-lines-for [function]") {
  @include test("Should return minimum multiple of line-height units needed to contain `$from`.") {
    $from: 3px;
    $output: p-lines-for($from);
    $expect: 2;

    @include assert-equal($output, $expect);
  }
}

@include test-module("p-establisb-baseline [mixin]") {
  @include test("Should output font baseline.") {
    @include assert {
      @include output($selector: false) {
        @include p-establish-baseline;
      }

      @include expect($selector: false) {
        :root {
          font-size: 100%;
          line-height: 2em;
        }
      }
    }
  }
}

@include test-module("p-line-height [mixin]") {
  @include test("Should output correct line-height to maintain rhythm w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 5px;

        @include p-line-height($lines);
      }

      @include expect {
        line-height: 2rem;
      }
    }
  }

  @include test("Should output correct line-height to maintain rhythm w/ unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 8;

        @include p-line-height($lines);
      }

      @include expect {
        line-height: 8rem;
      }
    }
  }
}

@include test-module("p-font-size [mixin]") {
  @include test("Should output font-size and line-height.") {
    @include assert {
      @include output {
        $to: 13px;

        @include p-font-size($to);
      }

      @include expect {
        font-size: 0.8125rem;
        line-height: 2rem;
      }
    }
  }

  @include test("Should output font-size and correct line-height to maintain rhythm w/ new assigned `$lines` value.") {
    @include assert {
      @include output {
        $to: 21px;
        $lines: 8;

        @include p-font-size($to, $lines);
      }

      @include expect {
        font-size: 1.3125rem;
        line-height: 8rem;
      }
    }
  }

  @include test("Should output font-size and line-height adjusted from new assigned `$from` value.") {
    @include assert {
      @include output {
        $to: 0.6em;
        $lines: null;
        $from: 144px;

        @include p-font-size($to, $lines, $from);
      }

      @include expect {
        font-size: 5.4rem;
        line-height: 6rem;
      }
    }
  }
}

@include test-module("p-padding-top [mixin]") {
  @include test("Should output leading whitespace as padding.") {
    @include assert {
      @include output {
        $lines: 3.4;

        @include p-padding-top($lines);
      }

      @include expect {
        padding-top: 4rem;
      }
    }
  }

  @include test("Should output leading whitespace as padding w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 55px;

        @include p-padding-top($lines);
      }

      @include expect {
        padding-top: 4rem;
      }
    }
  }
}

@include test-module("p-padding-bottom [mixin]") {
  @include test("Should output trailing whitespace as padding.") {
    @include assert {
      @include output {
        $lines: 3.4;

        @include p-padding-bottom($lines);
      }

      @include expect {
        padding-bottom: 4rem;
      }
    }
  }

  @include test("Should output trailing whitespace as padding w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 55px;

        @include p-padding-bottom($lines);
      }

      @include expect {
        padding-bottom: 4rem;
      }
    }
  }
}

@include test-module("p-padding [mixin]") {
  @include test("Should output padding shorthand to apply whitespace equally to all sides.") {
    @include assert {
      @include output {
        $top: 2;
        $right: $top;
        $bottom: $top;
        $left: $top;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding: 2rem;
      }
    }
  }

  @include test("Should output padding shorthand to apply horizontal and vertical whitespace.") {
    @include assert {
      @include output {
        $top: 3;
        $right: 5;
        $bottom: $top;
        $left: $right;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding: 3rem 5rem;
      }
    }
  }

  @include test("Should output padding shorthand to apply whitespace on each side.") {
    @include assert {
      @include output {
        $top: 8;
        $right: 13;
        $bottom: 21;
        $left: 34;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding: 8rem 13rem 21rem 34rem;
      }
    }
  }

  @include test("Should output horizontal whitespaces as padding.") {
    @include assert {
      @include output {
        $top: 55;
        $right: -89;
        $bottom: $top;
        $left: $right;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding-top: 55rem;
        padding-bottom: 55rem;
      }
    }
  }
}

@include test-module("p-margin-top [mixin]") {
  @include test("Should output leading whitespace as margin.") {
    @include assert {
      @include output {
        $lines: 3.4;

        @include p-margin-top($lines);
      }

      @include expect {
        margin-top: 4rem;
      }
    }
  }

  @include test("Should output leading whitespace as margin w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 55px;

        @include p-margin-top($lines);
      }

      @include expect {
        margin-top: 4rem;
      }
    }
  }
}

@include test-module("p-margin-bottom [mixin]") {
  @include test("Should output trailing whitespace as margin.") {
    @include assert {
      @include output {
        $lines: 3.4;

        @include p-margin-bottom($lines);
      }

      @include expect {
        margin-bottom: 4rem;
      }
    }
  }

  @include test("Should output trailing whitespace as margin w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 55px;

        @include p-margin-bottom($lines);
      }

      @include expect {
        margin-bottom: 4rem;
      }
    }
  }
}

@include test-module("p-margin [mixin]") {
  @include test("Should output margin shorthand to apply whitespace equally to all sides.") {
    @include assert {
      @include output {
        $top: 2;
        $right: $top;
        $bottom: $top;
        $left: $top;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin: 2rem;
      }
    }
  }

  @include test("Should output margin shorthand to apply horizontal and vertical whitespace.") {
    @include assert {
      @include output {
        $top: 3;
        $right: 5;
        $bottom: $top;
        $left: $right;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin: 3rem 5rem;
      }
    }
  }

  @include test("Should output margin shorthand to apply whitespace on each side.") {
    @include assert {
      @include output {
        $top: 8;
        $right: 13;
        $bottom: 21;
        $left: 34;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin: 8rem 13rem 21rem 34rem;
      }
    }
  }

  @include test("Should output horizontal whitespaces as margin.") {
    @include assert {
      @include output {
        $top: 55;
        $right: 0;
        $bottom: $top;
        $left: $right;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin-top: 55rem;
        margin-bottom: 55rem;
      }
    }
  }
}

@include test-module("_p-border [mixin]") {
  @include test("Should output border and whitespace to `$side` assigned value w/o destroying vertical rhythm.") {
    @include assert {
      @include output {
        $side: "bottom";
        $width: 1px;
        $lines: 1;

        @include _p-border($side, $width, $lines);
      }

      @include expect {
        padding-bottom: 0.9375rem;
        border-bottom: 0.0625rem solid #ccc;
      }
    }
  }
}

@include test-module("p-border [mixin]") {
  @include test("Should output borders and whitespaces equally to all sides.") {
    @include assert {
      @include output {
        $width: 2px;
        $lines: 3;

        @include p-border($width, $lines);
      }

      @include expect {
        padding: 2.875rem;
        border: 0.125rem solid #ccc;
      }
    }
  }
}

@include test-module("p-border-top [mixin]") {
  @include test("Should output leading border and whitespace w/ new `$style` assigned value.") {
    @include assert {
      @include output {
        $width: 5px;
        $lines: 8;
        $style: "dashed";

        @include p-border-top($width, $lines, $style);
      }

      @include expect {
        padding-top: 7.6875rem;
        border-top: 0.3125rem dashed #ccc;
      }
    }
  }
}

@include test-module("p-border-bottom [mixin]") {
  @include test("Should output trailing border and whitespace w/ new `$color` assigned value.") {
    @include assert {
      @include output {
        $width: 13px;
        $lines: 21;
        $color: #f00;

        @include p-border-bottom($width, $lines, $color: $color);
      }

      @include expect {
        padding-bottom: 20.1875rem;
        border-bottom: 0.8125rem solid #f00;
      }
    }
  }
}

@include test-module("p-debug [mixin]") {
  @include test("Should output background-image to debug vertical alignment.") {
    @include assert {
      @include output {
        @include p-debug;
      }

      @include expect {
        background-image: linear-gradient(to top, rgba(#f00, 0.2) 12.5%, transparent 12.5%), linear-gradient(to top, rgba(#f00, 0.6) 6.25%, transparent 6.25%);
        background-position: top right;
        background-size: 100% 0.5rem, 100% 1rem;
      }
    }
  }

  @include test("Should output background-image to debug vertical alignment w/ new `$color` assigned value.") {
    @include assert {
      @include output {
        $color: rgba(#000, 0.9);

        @include p-debug($color);
      }

      @include expect {
        background-image: linear-gradient(to top, rgba(#000, 0.3) 12.5%, transparent 12.5%), linear-gradient(to top, rgba(#000, 0.9) 6.25%, transparent 6.25%);
        background-position: top right;
        background-size: 100% 0.5rem, 100% 1rem;
      }
    }
  }
}
