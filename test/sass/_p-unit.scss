//
// pasteque-unit
//
// 0.0.6
//
// Beautify typography:
// Unit.
// pasteque-unit is a fork from Compass.
//
// Zaza Agency <hi@zaza.africa> (zaza.africa)
//
// This work is licensed under the Creative Commons
// Attribution 4.0 International License. To view a copy
// of this license, visit http://creativecommons.org/licenses/by/4.0/.
//

@include test-module("p-unit-convert [function]") {
  @include test("Should return converted `$length` relative to base font-size.") {
    $length: 16px;
    $output: p-unit-convert($length, "rem");
    $expect: 1rem;

    @include assert-equal($output, $expect);
  }

  @include test("Should return converted `$length` relative to new assigned `$from` value.") {
    $length: -0.04em;
    $from: 112px;
    $output: p-unit-convert($length, "rem", $from);
    $expect: -0.28rem;

    @include assert-equal($output, $expect);
  }
}

@include test-module("_p-unit-px-rem [function]") {
  @include test("Should return px/rem versions of a px `$value`.") {
    $value: 13.21px;
    $output: _p-unit-px-rem($value);
    $expect: ("px": 13px, "rem": 0.825625rem);

    @include assert-equal($output, $expect);
  }

  @include test("Should return px/rem versions of a rem `$value`.") {
    $value: 34.55rem;
    $output: _p-unit-px-rem($value);
    $expect: ("px": 553px, "rem": 34.55rem);

    @include assert-equal($output, $expect);
  }
}

@include test-module("p-unit-px-rem [function]") {
  @include test("Should return px/rem versions of nested list `$value`.") {
    $value: (8px, (13.21px 34.55rem), 89rem);
    $output: p-unit-px-rem($value);
    $expect: ("px": (8px, (13px 553px), 1424px), "rem": (0.5rem, (0.825625rem 34.55rem), 89rem));

    @include assert-equal($output, $expect);
  }
}

@include test-module("p-unit-rem [mixin]") {
  @include test("Should output style rule containing rem values w/ fallback rule.") {
    @include assert {
      $p-unit-global: "px" !global;

      @include output {
        $property: "font-size";
        $value: 14px;

        @include p-unit-rem($property, $value);
      }

      @include expect {
        font-size: 14px;
        font-size: 0.875rem;
      }
    }
  }

  @include test("Should output style rule containing rem values.") {
    $p-unit-global: "rem" !global;

    @include assert {
      @include output {
        $property: "line-height";
        $value: 32px;

        @include p-unit-rem($property, $value);
      }

      @include expect {
        line-height: 2rem;
      }
    }
  }
}
