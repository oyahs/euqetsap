//
// pasteque
//
// 0.0.6
//
// Beautify typography.
// pasteque is a fork from Compass typography.
//
// Zaza Agency <hi@zaza.africa> (zaza.africa)
//
// This work is licensed under the Creative Commons
// Attribution 4.0 International License. To view a copy
// of this license, visit http://creativecommons.org/licenses/by/4.0/.
//

@mixin before-test-typography {
  $p-border-color-global: #ccc !global;
  $p-border-style-global: "solid" !global;
  $p-border-width-global: 1px !global;
}

@include before-test-typography;

@include test-module("p-rhythm [function]") {
  @include test("Should return default rhythm.") {
    $lines: 1;
    $output: p-rhythm($lines);
    $expect: 1rem;

    @include assert-equal($output, $expect);
  }

  @include test("Should return a multiple of line-height minus new assigned `$minus` value.") {
    $lines: 3;
    $minus: 5px;
    $output: p-rhythm($lines, $minus);
    $expect: 2.6875rem;

    @include assert-equal($output, $expect);
  }
}

@include test-module("_p-lines-for [function]") {
  @include test("Should return minimum multiple rhythm units needed to contain `$from`.") {
    $from: -24px;
    $output: _p-lines-for($from);
    $expect: -1;

    @include assert-equal($output, $expect);
  }
}

@include test-module("p-lines-for [function]") {
  @include test("Should return minimum multiple of line-height units needed to contain `$from`.") {
    $from: 5px;
    $output: p-lines-for($from);
    $expect: 2;

    @include assert-equal($output, $expect);
  }
}

@include test-module("p-establish-baseline [mixin]") {
  @include test("Should output font baseline.") {
    @include assert {
      @include output {
        @include p-establish-baseline;
      }

      @include expect {
        font-size: 100%;
        line-height: 2em;
      }
    }
  }
}

@include test-module("p-line-height [mixin]") {
  @include test("Should output correct line-height to maintain rhythm w/ not unitless `$from` value.") {
    @include assert {
      @include output {
        $from: 14px;

        @include p-line-height($from);
      }

      @include expect {
        line-height: 2rem;
      }
    }
  }

  @include test("Should output correct line-height to maintain rhythm w/ unitless `$from` value.") {
    @include assert {
      @include output {
        $from: 1;

        @include p-line-height($from);
      }

      @include expect {
        line-height: 2rem;
      }
    }
  }
}

@include test-module("p-font-size [mixin]") {
  @include test("Should output font-size and line-height.") {
    @include assert {
      @include output {
        $to: 14px;

        @include p-font-size($to);
      }

      @include expect {
        font-size: 0.875rem;
        line-height: 2rem;
      }
    }
  }

  @include test("Should output font-size and line-height adjusted from new assigned `$from` value.") {
    @include assert {
      @include output {
        $to: 0.6em;
        $from: 122px;

        @include p-font-size($to, $from);
      }

      @include expect {
        font-size: 4.575rem;
        line-height: 5rem;
      }
    }
  }
}

@include test-module("p-padding-top [mixin]") {
  @include test("Should output leading whitespace as padding.") {
    @include assert {
      @include output {
        $lines: 2;

        @include p-padding-top($lines);
      }

      @include expect {
        padding-top: 2rem;
      }
    }
  }

  @include test("Should output leading whitespace as padding w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 24px;

        @include p-padding-top($lines);
      }

      @include expect {
        padding-top: 2rem;
      }
    }
  }
}

@include test-module("p-padding-bottom [mixin]") {
  @include test("Should output trailing whitespace as padding.") {
    @include assert {
      @include output {
        $lines: 2;

        @include p-padding-bottom($lines);
      }

      @include expect {
        padding-bottom: 2rem;
      }
    }
  }

  @include test("Should output trailing whitespace as padding w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 24px;

        @include p-padding-bottom($lines);
      }

      @include expect {
        padding-bottom: 2rem;
      }
    }
  }
}

@include test-module("p-padding [mixin]") {
  @include test("Should output padding shorthand to apply whitespace equally to all sides.") {
    @include assert {
      @include output {
        $top: 1;
        $right: $top;
        $bottom: $top;
        $left: $right;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding: 1rem;
      }
    }
  }

  @include test("Should output padding shorthand to apply horizontal and vertical whitespace.") {
    @include assert {
      @include output {
        $top: 1;
        $right: 2;
        $bottom: $top;
        $left: $right;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding: 1rem 2rem;
      }
    }
  }

  @include test("Should output padding shorthand to apply whitespace on each side.") {
    @include assert {
      @include output {
        $top: 3;
        $right: 5;
        $bottom: 8;
        $left: 13;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding: 3rem 5rem 8rem 13rem;
      }
    }
  }

  @include test("Should output horizontal whitespaces as padding.") {
    @include assert {
      @include output {
        $top: 21;
        $right: -34;
        $bottom: $top;
        $left: $right;

        @include p-padding($top, $right, $bottom, $left);
      }

      @include expect {
        padding-top: 21rem;
        padding-bottom: 21rem;
      }
    }
  }
}

@include test-module("p-margin-top [mixin]") {
  @include test("Should output leading whitespace as margin.") {
    @include assert {
      @include output {
        $lines: 2;

        @include p-margin-top($lines);
      }

      @include expect {
        margin-top: 2rem;
      }
    }
  }

  @include test("Should output leading whitespace as margin w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 24px;

        @include p-margin-top($lines);
      }

      @include expect {
        margin-top: 2rem;
      }
    }
  }
}

@include test-module("p-margin-bottom [mixin]") {
  @include test("Should output trailing whitespace as margin.") {
    @include assert {
      @include output {
        $lines: 2;

        @include p-margin-bottom($lines);
      }

      @include expect {
        margin-bottom: 2rem;
      }
    }
  }

  @include test("Should output trailing whitespace as margin w/ not unitless `$lines` value.") {
    @include assert {
      @include output {
        $lines: 24px;

        @include p-margin-bottom($lines);
      }

      @include expect {
        margin-bottom: 2rem;
      }
    }
  }
}

@include test-module("p-margin [mixin]") {
  @include test("Should output margin shorthand to apply whitespace equally to all sides.") {
    @include assert {
      @include output {
        $top: 1;
        $right: $top;
        $bottom: $top;
        $left: $right;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin: 1rem;
      }
    }
  }

  @include test("Should output margin shorthand to apply horizontal and vertical whitespace.") {
    @include assert {
      @include output {
        $top: 1;
        $right: 2;
        $bottom: $top;
        $left: $right;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin: 1rem 2rem;
      }
    }
  }

  @include test("Should output margin shorthand to apply whitespace on each side.") {
    @include assert {
      @include output {
        $top: 3;
        $right: 5;
        $bottom: 8;
        $left: 13;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin: 3rem 5rem 8rem 13rem;
      }
    }
  }

  @include test("Should output horizontal whitespaces as margin.") {
    @include assert {
      @include output {
        $top: 21;
        $right: 0;
        $bottom: $top;
        $left: $right;

        @include p-margin($top, $right, $bottom, $left);
      }

      @include expect {
        margin-top: 21rem;
        margin-bottom: 21rem;
      }
    }
  }
}

@include test-module("p-apply-side-rhythm-border [mixin]") {
  @include test("Should output border and whitespace to `$side` assigned value without destroying vertical rhythm.") {
    @include assert {
      @include output {
        $side: "bottom";
        $lines: 24px;
        $width: 3px;

        @include p-apply-side-rhythm-border($side, $lines, $width);
      }

      @include expect {
        padding-bottom: 1.8125rem;
        border-bottom: 0.1875rem solid #ccc;
      }
    }
  }
}

@include test-module("p-border [mixin]") {
  @include test("Should output borders and whitespace equally to all sides.") {
    @include assert {
      @include output {
        $lines: 2;
        $width: 3px;

        @include p-border($lines, $width);
      }

      @include expect {
        padding: 1.8125rem;
        border: 0.1875rem solid #ccc;
      }
    }
  }
}

@include test-module("p-border-top [mixin]") {
  @include test("Should output leading border w/ new `$style` assigned value.") {
    @include assert {
      @include output {
        $lines: 2;
        $width: 3px;
        $style: "dashed";

        @include p-border-top($lines, $width, $style);
      }

      @include expect {
        padding-top: 1.8125rem;
        border-top: 0.1875rem dashed #ccc;
      }
    }
  }
}

@include test-module("p-border-bottom [mixin]") {
  @include test("Should output leading border w/ new `$color` assigned value.") {
    @include assert {
      @include output {
        $lines: 2;
        $width: 3px;
        $color: #f00;

        @include p-border-bottom($lines, $width, $color: $color);
      }

      @include expect {
        padding-bottom: 1.8125rem;
        border-bottom: 0.1875rem solid #f00;
      }
    }
  }
}
